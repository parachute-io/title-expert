=begin
#ACS Title Expert

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module TitleExpert
  # Represents one entry from one of the Property, Proprietorship or Charges registers
  class RegisterEntry
    # The register containing the entry
    attr_accessor :register

    # Whether this entry is a normal register entry (false) or is an entry in a schedule (true)
    attr_accessor :is_schedule

    # If this is an entry in a schedule then the schedule type, otherwise null.
    attr_accessor :schedule_type

    # If this is an entry in a schedule then the 1-based index into the array of Schedules for this register, otherwise null.
    attr_accessor :schedule_number

    # The non-null non-empty entry \"number\". Although normally an integer, it is typed as a string in the RES schema.
    attr_accessor :entry_number

    # An optional string (so may be null) describing the type of the register entry. The possible values are not defined anywhere, but on 30/05/2012 Matthew Bell of the Land Registry gave us a list (of some 300 entries) of all the values he knew about.
    attr_accessor :entry_type

    # Date of the entry. May be null.
    attr_accessor :entry_date

    # Registration date of the entry. May be null. I believe this only applies to certain types of entry.
    attr_accessor :registration_date

    # If present and true, then the text of the entry preserves the line breaks in the register. Entries with this value set should be displayed in a fixed-width font as they are typically formatted so as to appear in columns.
    attr_accessor :text_has_newlines

    # Text of the entry. If TextHasNewlines == true then lines are separated with Environment.Newline, otherwise line breaks have been replaced by spaces.
    attr_accessor :text

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'register' => :'Register',
        :'is_schedule' => :'IsSchedule',
        :'schedule_type' => :'ScheduleType',
        :'schedule_number' => :'ScheduleNumber',
        :'entry_number' => :'EntryNumber',
        :'entry_type' => :'EntryType',
        :'entry_date' => :'EntryDate',
        :'registration_date' => :'RegistrationDate',
        :'text_has_newlines' => :'TextHasNewlines',
        :'text' => :'Text'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'register' => :'String',
        :'is_schedule' => :'BOOLEAN',
        :'schedule_type' => :'String',
        :'schedule_number' => :'Integer',
        :'entry_number' => :'String',
        :'entry_type' => :'String',
        :'entry_date' => :'DateTime',
        :'registration_date' => :'DateTime',
        :'text_has_newlines' => :'BOOLEAN',
        :'text' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Register')
        self.register = attributes[:'Register']
      end

      if attributes.has_key?(:'IsSchedule')
        self.is_schedule = attributes[:'IsSchedule']
      end

      if attributes.has_key?(:'ScheduleType')
        self.schedule_type = attributes[:'ScheduleType']
      end

      if attributes.has_key?(:'ScheduleNumber')
        self.schedule_number = attributes[:'ScheduleNumber']
      end

      if attributes.has_key?(:'EntryNumber')
        self.entry_number = attributes[:'EntryNumber']
      end

      if attributes.has_key?(:'EntryType')
        self.entry_type = attributes[:'EntryType']
      end

      if attributes.has_key?(:'EntryDate')
        self.entry_date = attributes[:'EntryDate']
      end

      if attributes.has_key?(:'RegistrationDate')
        self.registration_date = attributes[:'RegistrationDate']
      end

      if attributes.has_key?(:'TextHasNewlines')
        self.text_has_newlines = attributes[:'TextHasNewlines']
      end

      if attributes.has_key?(:'Text')
        self.text = attributes[:'Text']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @register.nil?
        invalid_properties.push("invalid value for 'register', register cannot be nil.")
      end

      if @is_schedule.nil?
        invalid_properties.push("invalid value for 'is_schedule', is_schedule cannot be nil.")
      end

      if @entry_number.nil?
        invalid_properties.push("invalid value for 'entry_number', entry_number cannot be nil.")
      end

      if @text.nil?
        invalid_properties.push("invalid value for 'text', text cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @register.nil?
      register_validator = EnumAttributeValidator.new('String', ["Unknown", "Property", "Proprietorship", "Charges"])
      return false unless register_validator.valid?(@register)
      return false if @is_schedule.nil?
      return false if @entry_number.nil?
      return false if @text.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] register Object to be assigned
    def register=(register)
      validator = EnumAttributeValidator.new('String', ["Unknown", "Property", "Proprietorship", "Charges"])
      unless validator.valid?(register)
        fail ArgumentError, "invalid value for 'register', must be one of #{validator.allowable_values}."
      end
      @register = register
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          register == o.register &&
          is_schedule == o.is_schedule &&
          schedule_type == o.schedule_type &&
          schedule_number == o.schedule_number &&
          entry_number == o.entry_number &&
          entry_type == o.entry_type &&
          entry_date == o.entry_date &&
          registration_date == o.registration_date &&
          text_has_newlines == o.text_has_newlines &&
          text == o.text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [register, is_schedule, schedule_type, schedule_number, entry_number, entry_type, entry_date, registration_date, text_has_newlines, text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TitleExpert.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
