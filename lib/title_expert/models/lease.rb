=begin
#ACS Title Expert

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module TitleExpert
  # The data extracted from a single RES LeaseEntry element if this is a leasehold property.
  class Lease
    # Two or more parties to the lease.
    attr_accessor :parties

    # The text containing details of the lease term.
    attr_accessor :lease_term_text

    # If true then the lease term could not be fully parsed. Some information may have been extracted, but the term should be checked manually before relying on any such information.
    attr_accessor :unable_to_fully_parse_term

    # The lease term in years, rounded down if is not a whole number of years, or null if it cannot be determined.
    attr_accessor :term_in_years

    # The lease start date, or null if it cannot be determined.
    attr_accessor :term_start_date

    # The lease end date (i.e. the last date on which the lease is valid), or null if it cannot be determined. The date 31/12/9998 is a special value indicating that the lease end date is outside the range of a DateTime value (because the lease duration is a very long period, e.g. 10,000 years).
    attr_accessor :term_end_date

    # Number of whole years remaining on the lease at the date the Title Check was performed, or null it it cannot be determined.
    attr_accessor :years_remaining

    # The register entry containing the lease details.
    attr_accessor :register_entry


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'parties' => :'Parties',
        :'lease_term_text' => :'LeaseTermText',
        :'unable_to_fully_parse_term' => :'UnableToFullyParseTerm',
        :'term_in_years' => :'TermInYears',
        :'term_start_date' => :'TermStartDate',
        :'term_end_date' => :'TermEndDate',
        :'years_remaining' => :'YearsRemaining',
        :'register_entry' => :'RegisterEntry'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'parties' => :'Array<Party>',
        :'lease_term_text' => :'String',
        :'unable_to_fully_parse_term' => :'BOOLEAN',
        :'term_in_years' => :'Integer',
        :'term_start_date' => :'DateTime',
        :'term_end_date' => :'DateTime',
        :'years_remaining' => :'Integer',
        :'register_entry' => :'RegisterEntry'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Parties')
        if (value = attributes[:'Parties']).is_a?(Array)
          self.parties = value
        end
      end

      if attributes.has_key?(:'LeaseTermText')
        self.lease_term_text = attributes[:'LeaseTermText']
      end

      if attributes.has_key?(:'UnableToFullyParseTerm')
        self.unable_to_fully_parse_term = attributes[:'UnableToFullyParseTerm']
      end

      if attributes.has_key?(:'TermInYears')
        self.term_in_years = attributes[:'TermInYears']
      end

      if attributes.has_key?(:'TermStartDate')
        self.term_start_date = attributes[:'TermStartDate']
      end

      if attributes.has_key?(:'TermEndDate')
        self.term_end_date = attributes[:'TermEndDate']
      end

      if attributes.has_key?(:'YearsRemaining')
        self.years_remaining = attributes[:'YearsRemaining']
      end

      if attributes.has_key?(:'RegisterEntry')
        self.register_entry = attributes[:'RegisterEntry']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @parties.nil?
        invalid_properties.push("invalid value for 'parties', parties cannot be nil.")
      end

      if @lease_term_text.nil?
        invalid_properties.push("invalid value for 'lease_term_text', lease_term_text cannot be nil.")
      end

      if @unable_to_fully_parse_term.nil?
        invalid_properties.push("invalid value for 'unable_to_fully_parse_term', unable_to_fully_parse_term cannot be nil.")
      end

      if @register_entry.nil?
        invalid_properties.push("invalid value for 'register_entry', register_entry cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @parties.nil?
      return false if @lease_term_text.nil?
      return false if @unable_to_fully_parse_term.nil?
      return false if @register_entry.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          parties == o.parties &&
          lease_term_text == o.lease_term_text &&
          unable_to_fully_parse_term == o.unable_to_fully_parse_term &&
          term_in_years == o.term_in_years &&
          term_start_date == o.term_start_date &&
          term_end_date == o.term_end_date &&
          years_remaining == o.years_remaining &&
          register_entry == o.register_entry
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [parties, lease_term_text, unable_to_fully_parse_term, term_in_years, term_start_date, term_end_date, years_remaining, register_entry].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TitleExpert.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
