=begin
#ACS Title Expert

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module TitleExpert
  # Information about the status of a request.
  class ResponseCommon
    # The request id, allocated when the request was accepted by the system.
    attr_accessor :id

    # The URL that can be used to retrieve the results of the request.
    attr_accessor :response_uri

    # The reference string provided at the time the Request was constructed.
    attr_accessor :reference

    # The date/time provided for the Request, by which a final result must be known.
    attr_accessor :deadline

    # One of: Pending: Request has been submitted to the system for processing; final result is not yet known or ready. Complete: Processing for the Request has completed successfully and the results are available. Failed: Processing for the Request has completed but the Request was not successful. Cancelled: The Request was cancelled before processing was started or completed. Expired: The Request had a Deadline set and it was met before the Request finished.
    attr_accessor :status

    # The UTC date and time when the Status last changed (i.e. when the request was issued if the status is Pending, or when the result became known otherwise).
    attr_accessor :status_last_changed

    # If the status is Complete or Failed, the URI that can be used to acknowledge receipt of the results of this request. Null if the status is Pending.
    attr_accessor :acknowledge_uri

    # Whether or not receipt of the results of this request have been explicitly acknowledged.
    attr_accessor :acknowledged


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'Id',
        :'response_uri' => :'ResponseUri',
        :'reference' => :'Reference',
        :'deadline' => :'Deadline',
        :'status' => :'Status',
        :'status_last_changed' => :'StatusLastChanged',
        :'acknowledge_uri' => :'AcknowledgeUri',
        :'acknowledged' => :'Acknowledged'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'response_uri' => :'String',
        :'reference' => :'String',
        :'deadline' => :'DateTime',
        :'status' => :'String',
        :'status_last_changed' => :'DateTime',
        :'acknowledge_uri' => :'String',
        :'acknowledged' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Id')
        self.id = attributes[:'Id']
      end

      if attributes.has_key?(:'ResponseUri')
        self.response_uri = attributes[:'ResponseUri']
      end

      if attributes.has_key?(:'Reference')
        self.reference = attributes[:'Reference']
      end

      if attributes.has_key?(:'Deadline')
        self.deadline = attributes[:'Deadline']
      end

      if attributes.has_key?(:'Status')
        self.status = attributes[:'Status']
      end

      if attributes.has_key?(:'StatusLastChanged')
        self.status_last_changed = attributes[:'StatusLastChanged']
      end

      if attributes.has_key?(:'AcknowledgeUri')
        self.acknowledge_uri = attributes[:'AcknowledgeUri']
      end

      if attributes.has_key?(:'Acknowledged')
        self.acknowledged = attributes[:'Acknowledged']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @response_uri.nil?
        invalid_properties.push("invalid value for 'response_uri', response_uri cannot be nil.")
      end

      if @status.nil?
        invalid_properties.push("invalid value for 'status', status cannot be nil.")
      end

      if @status_last_changed.nil?
        invalid_properties.push("invalid value for 'status_last_changed', status_last_changed cannot be nil.")
      end

      if @acknowledged.nil?
        invalid_properties.push("invalid value for 'acknowledged', acknowledged cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @response_uri.nil?
      return false if @status.nil?
      return false if @status_last_changed.nil?
      return false if @acknowledged.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          response_uri == o.response_uri &&
          reference == o.reference &&
          deadline == o.deadline &&
          status == o.status &&
          status_last_changed == o.status_last_changed &&
          acknowledge_uri == o.acknowledge_uri &&
          acknowledged == o.acknowledged
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, response_uri, reference, deadline, status, status_last_changed, acknowledge_uri, acknowledged].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TitleExpert.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
