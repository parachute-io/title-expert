=begin
#ACS Title Expert

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module TitleExpert
  # Specifies a request to perform a Title Check of supplied XML from Register Extract Service.
  class TitleCheckXmlRequest
    # Information about the client issuing the request
    attr_accessor :client_parameters

    # If provided (ISO8601/like format yyyy-MM-dd HH:mm:ss), specifies that if the final response has not been received from the LRBG before the Deadline is met, the Request will be marked as Expired and made available for immediate return (LRBG costs may still be incurred).
    attr_accessor :deadline

    # If true then issues which are normally aggregated will instead be split into separate issues (e.g. instead of one issue such as \"3 restriction(s) found\" there will be three separate \"Restriction found\" issues).
    attr_accessor :no_aggregated_issues

    # Optional. The Title Number for which data was originally requested, if different from that actually returned (such as if closed-and-continued). If not provided, the TitleNumber in the Summary data will be used.
    attr_accessor :requested_title

    # Optional. If specified provide one or more PDF documents related to the title (as returned from the Register Extract Service). By convention, the first document will contain an Official Copy of the Register of Title and the second an Official Copy of the Title Plan. Specifying an array (empty or otherwise) here will override any attachments in the GatewayResponse property.
    attr_accessor :documents

    # Provide the XML SOAP Envelope or ResponseOCWithSummaryV2_1Type or GatewayResponse verbatim from the LRBG, base-64 encoded. Attachment contents will be accepted if valid ZIP or PDF format data is found. Attachment contents are skipped if any value is provided for the Documents property.
    attr_accessor :gateway_response


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_parameters' => :'ClientParameters',
        :'deadline' => :'Deadline',
        :'no_aggregated_issues' => :'NoAggregatedIssues',
        :'requested_title' => :'RequestedTitle',
        :'documents' => :'Documents',
        :'gateway_response' => :'GatewayResponse'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'client_parameters' => :'ClientParameters',
        :'deadline' => :'DateTime',
        :'no_aggregated_issues' => :'BOOLEAN',
        :'requested_title' => :'String',
        :'documents' => :'Array<NamedBlob>',
        :'gateway_response' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ClientParameters')
        self.client_parameters = attributes[:'ClientParameters']
      end

      if attributes.has_key?(:'Deadline')
        self.deadline = attributes[:'Deadline']
      end

      if attributes.has_key?(:'NoAggregatedIssues')
        self.no_aggregated_issues = attributes[:'NoAggregatedIssues']
      end

      if attributes.has_key?(:'RequestedTitle')
        self.requested_title = attributes[:'RequestedTitle']
      end

      if attributes.has_key?(:'Documents')
        if (value = attributes[:'Documents']).is_a?(Array)
          self.documents = value
        end
      end

      if attributes.has_key?(:'GatewayResponse')
        self.gateway_response = attributes[:'GatewayResponse']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @client_parameters.nil?
        invalid_properties.push("invalid value for 'client_parameters', client_parameters cannot be nil.")
      end

      if !@requested_title.nil? && @requested_title !~ Regexp.new(/^[A-Z]{0,3}[0-9]{1,6}[TZ]?$/)
        invalid_properties.push("invalid value for 'requested_title', must conform to the pattern /^[A-Z]{0,3}[0-9]{1,6}[TZ]?$/.")
      end

      if @gateway_response.nil?
        invalid_properties.push("invalid value for 'gateway_response', gateway_response cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @client_parameters.nil?
      return false if !@requested_title.nil? && @requested_title !~ Regexp.new(/^[A-Z]{0,3}[0-9]{1,6}[TZ]?$/)
      return false if @gateway_response.nil?
      return true
    end

    # Custom attribute writer method with validation
    # @param [Object] requested_title Value to be assigned
    def requested_title=(requested_title)

      if !requested_title.nil? && requested_title !~ Regexp.new(/^[A-Z]{0,3}[0-9]{1,6}[TZ]?$/)
        fail ArgumentError, "invalid value for 'requested_title', must conform to the pattern /^[A-Z]{0,3}[0-9]{1,6}[TZ]?$/."
      end

      @requested_title = requested_title
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_parameters == o.client_parameters &&
          deadline == o.deadline &&
          no_aggregated_issues == o.no_aggregated_issues &&
          requested_title == o.requested_title &&
          documents == o.documents &&
          gateway_response == o.gateway_response
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_parameters, deadline, no_aggregated_issues, requested_title, documents, gateway_response].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TitleExpert.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
