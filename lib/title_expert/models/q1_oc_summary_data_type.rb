=begin
#ACS Title Expert

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module TitleExpert

  class Q1OCSummaryDataType
    attr_accessor :official_copy_date_time

    attr_accessor :edition_date

    attr_accessor :price_paid_entry

    attr_accessor :property_address

    attr_accessor :title

    attr_accessor :register_entry_indicators

    attr_accessor :proprietorship

    attr_accessor :lease

    attr_accessor :restriction_details

    attr_accessor :charge

    attr_accessor :agreed_notice

    attr_accessor :bankruptcy

    attr_accessor :caution

    attr_accessor :deed_of_postponement

    attr_accessor :green_out_entry

    attr_accessor :home_rights

    attr_accessor :rent_charge

    attr_accessor :vendors_lien

    attr_accessor :right_of_pre_emption

    attr_accessor :document_details

    attr_accessor :unilateral_notice_details

    attr_accessor :death_of_proprietor

    attr_accessor :discount_charge

    attr_accessor :equitable_charge

    attr_accessor :noted_charge

    attr_accessor :creditors_notice

    attr_accessor :unidentified_entry

    attr_accessor :ccbi_entry


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'official_copy_date_time' => :'OfficialCopyDateTime',
        :'edition_date' => :'EditionDate',
        :'price_paid_entry' => :'PricePaidEntry',
        :'property_address' => :'PropertyAddress',
        :'title' => :'Title',
        :'register_entry_indicators' => :'RegisterEntryIndicators',
        :'proprietorship' => :'Proprietorship',
        :'lease' => :'Lease',
        :'restriction_details' => :'RestrictionDetails',
        :'charge' => :'Charge',
        :'agreed_notice' => :'AgreedNotice',
        :'bankruptcy' => :'Bankruptcy',
        :'caution' => :'Caution',
        :'deed_of_postponement' => :'DeedOfPostponement',
        :'green_out_entry' => :'GreenOutEntry',
        :'home_rights' => :'HomeRights',
        :'rent_charge' => :'RentCharge',
        :'vendors_lien' => :'VendorsLien',
        :'right_of_pre_emption' => :'RightOfPreEmption',
        :'document_details' => :'DocumentDetails',
        :'unilateral_notice_details' => :'UnilateralNoticeDetails',
        :'death_of_proprietor' => :'DeathOfProprietor',
        :'discount_charge' => :'DiscountCharge',
        :'equitable_charge' => :'EquitableCharge',
        :'noted_charge' => :'NotedCharge',
        :'creditors_notice' => :'CreditorsNotice',
        :'unidentified_entry' => :'UnidentifiedEntry',
        :'ccbi_entry' => :'CCBIEntry'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'official_copy_date_time' => :'DateTimeType',
        :'edition_date' => :'DateType',
        :'price_paid_entry' => :'Q1PricePaidEntryType',
        :'property_address' => :'Array<Q1AddressType>',
        :'title' => :'Q1TitleType',
        :'register_entry_indicators' => :'Q1RegisterEntryIndicatorsType',
        :'proprietorship' => :'Q1ProprietorshipType',
        :'lease' => :'Array<Q1LeaseType>',
        :'restriction_details' => :'Array<Q1RestrictionEntryType>',
        :'charge' => :'Array<Q1ChargeDetailsType>',
        :'agreed_notice' => :'Array<Q1AgreedNoticeType>',
        :'bankruptcy' => :'Array<Q1EntryDetailsType>',
        :'caution' => :'Array<Q1EntryDetailsType>',
        :'deed_of_postponement' => :'Array<Q1EntryDetailsType>',
        :'green_out_entry' => :'Array<Q1EntryDetailsType>',
        :'home_rights' => :'Array<Q1HomeRightsType>',
        :'rent_charge' => :'Array<Q1EntryDetailsType>',
        :'vendors_lien' => :'Array<Q1EntryDetailsType>',
        :'right_of_pre_emption' => :'Array<Q1EntryDetailsType>',
        :'document_details' => :'Array<Q1DocumentEntryType>',
        :'unilateral_notice_details' => :'Array<Q1UnilateralNoticeDetailsType>',
        :'death_of_proprietor' => :'Array<Q1EntryDetailsType>',
        :'discount_charge' => :'Array<Q1EntryDetailsType>',
        :'equitable_charge' => :'Array<Q1EntryDetailsType>',
        :'noted_charge' => :'Array<Q1EntryDetailsType>',
        :'creditors_notice' => :'Array<Q1EntryDetailsType>',
        :'unidentified_entry' => :'Array<Q1EntryDetailsType>',
        :'ccbi_entry' => :'Array<Q1EntryDetailsType>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'OfficialCopyDateTime')
        self.official_copy_date_time = attributes[:'OfficialCopyDateTime']
      end

      if attributes.has_key?(:'EditionDate')
        self.edition_date = attributes[:'EditionDate']
      end

      if attributes.has_key?(:'PricePaidEntry')
        self.price_paid_entry = attributes[:'PricePaidEntry']
      end

      if attributes.has_key?(:'PropertyAddress')
        if (value = attributes[:'PropertyAddress']).is_a?(Array)
          self.property_address = value
        end
      end

      if attributes.has_key?(:'Title')
        self.title = attributes[:'Title']
      end

      if attributes.has_key?(:'RegisterEntryIndicators')
        self.register_entry_indicators = attributes[:'RegisterEntryIndicators']
      end

      if attributes.has_key?(:'Proprietorship')
        self.proprietorship = attributes[:'Proprietorship']
      end

      if attributes.has_key?(:'Lease')
        if (value = attributes[:'Lease']).is_a?(Array)
          self.lease = value
        end
      end

      if attributes.has_key?(:'RestrictionDetails')
        if (value = attributes[:'RestrictionDetails']).is_a?(Array)
          self.restriction_details = value
        end
      end

      if attributes.has_key?(:'Charge')
        if (value = attributes[:'Charge']).is_a?(Array)
          self.charge = value
        end
      end

      if attributes.has_key?(:'AgreedNotice')
        if (value = attributes[:'AgreedNotice']).is_a?(Array)
          self.agreed_notice = value
        end
      end

      if attributes.has_key?(:'Bankruptcy')
        if (value = attributes[:'Bankruptcy']).is_a?(Array)
          self.bankruptcy = value
        end
      end

      if attributes.has_key?(:'Caution')
        if (value = attributes[:'Caution']).is_a?(Array)
          self.caution = value
        end
      end

      if attributes.has_key?(:'DeedOfPostponement')
        if (value = attributes[:'DeedOfPostponement']).is_a?(Array)
          self.deed_of_postponement = value
        end
      end

      if attributes.has_key?(:'GreenOutEntry')
        if (value = attributes[:'GreenOutEntry']).is_a?(Array)
          self.green_out_entry = value
        end
      end

      if attributes.has_key?(:'HomeRights')
        if (value = attributes[:'HomeRights']).is_a?(Array)
          self.home_rights = value
        end
      end

      if attributes.has_key?(:'RentCharge')
        if (value = attributes[:'RentCharge']).is_a?(Array)
          self.rent_charge = value
        end
      end

      if attributes.has_key?(:'VendorsLien')
        if (value = attributes[:'VendorsLien']).is_a?(Array)
          self.vendors_lien = value
        end
      end

      if attributes.has_key?(:'RightOfPreEmption')
        if (value = attributes[:'RightOfPreEmption']).is_a?(Array)
          self.right_of_pre_emption = value
        end
      end

      if attributes.has_key?(:'DocumentDetails')
        if (value = attributes[:'DocumentDetails']).is_a?(Array)
          self.document_details = value
        end
      end

      if attributes.has_key?(:'UnilateralNoticeDetails')
        if (value = attributes[:'UnilateralNoticeDetails']).is_a?(Array)
          self.unilateral_notice_details = value
        end
      end

      if attributes.has_key?(:'DeathOfProprietor')
        if (value = attributes[:'DeathOfProprietor']).is_a?(Array)
          self.death_of_proprietor = value
        end
      end

      if attributes.has_key?(:'DiscountCharge')
        if (value = attributes[:'DiscountCharge']).is_a?(Array)
          self.discount_charge = value
        end
      end

      if attributes.has_key?(:'EquitableCharge')
        if (value = attributes[:'EquitableCharge']).is_a?(Array)
          self.equitable_charge = value
        end
      end

      if attributes.has_key?(:'NotedCharge')
        if (value = attributes[:'NotedCharge']).is_a?(Array)
          self.noted_charge = value
        end
      end

      if attributes.has_key?(:'CreditorsNotice')
        if (value = attributes[:'CreditorsNotice']).is_a?(Array)
          self.creditors_notice = value
        end
      end

      if attributes.has_key?(:'UnidentifiedEntry')
        if (value = attributes[:'UnidentifiedEntry']).is_a?(Array)
          self.unidentified_entry = value
        end
      end

      if attributes.has_key?(:'CCBIEntry')
        if (value = attributes[:'CCBIEntry']).is_a?(Array)
          self.ccbi_entry = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          official_copy_date_time == o.official_copy_date_time &&
          edition_date == o.edition_date &&
          price_paid_entry == o.price_paid_entry &&
          property_address == o.property_address &&
          title == o.title &&
          register_entry_indicators == o.register_entry_indicators &&
          proprietorship == o.proprietorship &&
          lease == o.lease &&
          restriction_details == o.restriction_details &&
          charge == o.charge &&
          agreed_notice == o.agreed_notice &&
          bankruptcy == o.bankruptcy &&
          caution == o.caution &&
          deed_of_postponement == o.deed_of_postponement &&
          green_out_entry == o.green_out_entry &&
          home_rights == o.home_rights &&
          rent_charge == o.rent_charge &&
          vendors_lien == o.vendors_lien &&
          right_of_pre_emption == o.right_of_pre_emption &&
          document_details == o.document_details &&
          unilateral_notice_details == o.unilateral_notice_details &&
          death_of_proprietor == o.death_of_proprietor &&
          discount_charge == o.discount_charge &&
          equitable_charge == o.equitable_charge &&
          noted_charge == o.noted_charge &&
          creditors_notice == o.creditors_notice &&
          unidentified_entry == o.unidentified_entry &&
          ccbi_entry == o.ccbi_entry
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [official_copy_date_time, edition_date, price_paid_entry, property_address, title, register_entry_indicators, proprietorship, lease, restriction_details, charge, agreed_notice, bankruptcy, caution, deed_of_postponement, green_out_entry, home_rights, rent_charge, vendors_lien, right_of_pre_emption, document_details, unilateral_notice_details, death_of_proprietor, discount_charge, equitable_charge, noted_charge, creditors_notice, unidentified_entry, ccbi_entry].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TitleExpert.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
